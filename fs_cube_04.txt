#version 330 core
/* This class is adapted from Ch7 of the exercise code by Dr Steve Maddock 
I have added a second light and a spotlight, code for which was adapted from
https://learnopengl.com/*/

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

struct Light2 {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

struct SpotLight {
  vec3 position;
  vec3 direction;
  float cutOff;
  float outerCutOff;

  float constant;
  float linear;
  float quadratic;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;       
};

uniform Light light;  
uniform Light2 light2;
uniform SpotLight spotLight;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;
vec3 CalcSpotLight(SpotLight light, vec3 aNormal, vec3 aPos, vec3 viewPos);

void main() {
  // ambient
  vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));
  vec3 ambient2 = light2.ambient * vec3(texture(first_texture, aTexCoord));

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  vec3 light2Dir = normalize(light2.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);
  float diff2 = max(dot(norm, light2Dir), 0.0);
  
  vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord));
  vec3 diffuse2 = light2.diffuse * diff2 * vec3(texture(first_texture, aTexCoord));
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  vec3 reflect2Dir = reflect(-light2Dir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  float spec2 =  + pow(max(dot(viewDir, reflect2Dir), 0.0), material.shininess);
  vec3 specular = light.specular * spec * vec3(texture(second_texture, aTexCoord));
  vec3 specular2 = light2.specular * spec2 * vec3(texture(second_texture, aTexCoord));

  vec3 result = ambient + diffuse + specular;
  result +=  ambient2 + diffuse2 + specular2;
  result += CalcSpotLight(spotLight, norm, aPos, viewDir);
  fragColor = vec4(result, 1.0);
}

vec3 CalcSpotLight(SpotLight spotLight, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(spotLight.position - fragPos);
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(spotLight.position - fragPos);
    float attenuation = 1.0 / (spotLight.constant + spotLight.linear * distance + spotLight.quadratic * (distance * distance));    
    // spotlight intensity
    float theta = dot(lightDir, normalize(-spotLight.direction)); 
    float epsilon = spotLight.cutOff - spotLight.outerCutOff;
    float intensity = clamp((theta - spotLight.outerCutOff) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient = spotLight.ambient * vec3(texture(first_texture, aTexCoord));
    vec3 diffuse = spotLight.diffuse * diff * vec3(texture(first_texture, aTexCoord));
    vec3 specular = spotLight.specular * spec * vec3(texture(second_texture, aTexCoord));
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
    return (ambient + diffuse + specular);
}
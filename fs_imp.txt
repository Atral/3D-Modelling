#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;
in vec3 aWorldPos;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D baseMap;
uniform sampler2D specularMap;
uniform sampler2D aoMap;
uniform sampler2D metallicMap;
uniform sampler2D normalMap;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light;  

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

vec3 getNormalFromMap()
{
    vec3 tangentNormal = texture(normalMap, aTexCoord).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(aWorldPos);
    vec3 Q2  = dFdy(aWorldPos);
    vec2 st1 = dFdx(aTexCoord);
    vec2 st2 = dFdy(aTexCoord);

    vec3 N   = normalize(aNormal);
    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B  = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}

void main() {
  // ambient
  vec3 ambient = light.ambient * vec3(texture(aoMap, aTexCoord)) * vec3(texture(baseMap, aTexCoord));

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);  
  float diff = max(dot(norm, lightDir), 0.0);
  
  vec3 diffuse = light.diffuse * diff * vec3(texture(baseMap, aTexCoord));

  // metallic
  vec3 metallic = vec3(texture(metallicMap, aTexCoord)) * vec3(texture(baseMap, aTexCoord)) /2;

  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  vec3 shine = vec3(texture(metallicMap, aTexCoord));
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * spec *  vec3(texture(specularMap, aTexCoord));

  vec3 result = ambient + diffuse + specular + metallic;
  fragColor = vec4(result, 1.0);
}
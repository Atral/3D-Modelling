#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;
 
uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;
uniform sampler2D third_texture;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

struct Light2 {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};


uniform Light light; 
uniform Light2 light2;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
}; 
  
uniform Material material;

void main() {
  // ambient
  vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));

  // diffuse
  vec3 norm = normalize(aNormal);
  vec3 lightDir = normalize(light.position - aPos);
  vec3 light2Dir = normalize(light2.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);
  float diff2 = max(dot(norm, light2Dir), 0.0);
  
  vec3 diffuse = (light.diffuse + light2.diffuse) * diff * diff2 * vec3(texture(third_texture, aTexCoord)); 
  
  // specular 
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  vec3 reflect2Dir = reflect(-light2Dir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess) + pow(max(dot(viewDir, reflect2Dir), 0.0), material.shininess);
  vec3 specular = vec3(texture(second_texture, aTexCoord)) * (light.specular + light2.specular) * spec;

  vec3 result = ambient + diffuse + specular;
  fragColor = vec4(result, 1.0);
}